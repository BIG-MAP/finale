{
  "title": "Measurement",
  "description": "A Measurement is done on a Formulation and contains data\n\nExample:\nmeas = schemas_pydantic.Measurement(formulation=form,temperature=temp,pending=False,fom_data=[data],kind=orig)",
  "type": "object",
  "properties": {
    "formulation": {
      "$ref": "#/definitions/Formulation"
    },
    "temperature": {
      "$ref": "#/definitions/Temperature"
    },
    "pending": {
      "title": "Pending",
      "type": "boolean"
    },
    "fom_data": {
      "title": "Fom Data",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FomData"
      }
    },
    "kind": {
      "$ref": "#/definitions/Origin"
    }
  },
  "required": [
    "formulation",
    "temperature",
    "pending",
    "fom_data",
    "kind"
  ],
  "definitions": {
    "Chemical": {
      "title": "Chemical",
      "description": "This defines a chemical\n\nEvery chemical needs a SMILES and a name like DMC => COC(=O)OC\nA reference is an optional thing like \"Vile 211003-Vial2-DMC\"\nExample:\ndmc = schemas_pydantic.Chemical(smiles='COC(=O)OC', name='DMC', reference='DMC_Elyte_2020')",
      "type": "object",
      "properties": {
        "smiles": {
          "title": "Smiles",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "reference": {
          "title": "Reference",
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "smiles",
        "name"
      ]
    },
    "Amount": {
      "title": "Amount",
      "description": "We store amount in units of mole TODO: Maybe recalc to mol?\n\nAmount is stored as a tuple like object i.e. how much and of what unit\nCurrently we only do mol\nExample: Amount(value=0.001,unit='mol')",
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "type": "number"
        },
        "unit": {
          "title": "Unit",
          "type": "string"
        }
      },
      "required": [
        "value",
        "unit"
      ]
    },
    "Ratio": {
      "title": "Ratio",
      "description": "An enumeration.",
      "enum": [
        "molar",
        "molal",
        "other"
      ],
      "type": "string"
    },
    "Formulation": {
      "title": "Formulation",
      "description": "A Formulation is a ratio mix of different chemicals\n    ",
      "type": "object",
      "properties": {
        "chemicals": {
          "title": "Chemicals",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Chemical"
          }
        },
        "amounts": {
          "title": "Amounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Amount"
          }
        },
        "ratio_method": {
          "$ref": "#/definitions/Ratio"
        }
      },
      "required": [
        "chemicals",
        "amounts",
        "ratio_method"
      ]
    },
    "Temperature": {
      "title": "Temperature",
      "description": "Temperature in Kelvin\nExample:\n    Temperature(value=380,unit='K')",
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "type": "number"
        },
        "unit": {
          "title": "Unit",
          "type": "string"
        }
      },
      "required": [
        "value",
        "unit"
      ]
    },
    "FomEnum": {
      "title": "FomEnum",
      "description": "An enumeration.",
      "enum": [
        "density",
        "viscosity",
        "conductivity",
        "aniondiffusion",
        "cationdiffusion",
        "vectorial"
      ],
      "type": "string"
    },
    "OriginEnum": {
      "title": "OriginEnum",
      "description": "An enumeration.",
      "enum": [
        "experiment",
        "simulation",
        "test"
      ],
      "type": "string"
    },
    "Origin": {
      "title": "Origin",
      "type": "object",
      "properties": {
        "origin": {
          "$ref": "#/definitions/OriginEnum"
        },
        "what": {
          "$ref": "#/definitions/FomEnum"
        }
      },
      "required": [
        "origin"
      ]
    },
    "FomData": {
      "title": "FomData",
      "description": "This is a wrapper for figure of merit (FOM) i.e. scalar data\n\nExample:\ndata = schemas_pydantic.FomData(values=[1.23],unit='g/cm**2',dim=1,\n                                name='density',origin=orig,internalReference='aTest',\n                                fail=False, message='My Message', rating=1)\n\ndata_nd = schemas_pydantic.FomData(values=[1.23,234,12,13,56,26],unit='g/cm**2',dim=6,\n                                name='vectorial',origin=orig,internalReference='aTest',\n                                fail=False, message='My Message', rating=1)",
      "type": "object",
      "properties": {
        "values": {
          "title": "Values",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "unit": {
          "title": "Unit",
          "type": "string"
        },
        "dim": {
          "title": "Dim",
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/FomEnum"
        },
        "origin": {
          "$ref": "#/definitions/Origin"
        },
        "internalReference": {
          "title": "Internalreference",
          "type": "string"
        },
        "fail": {
          "title": "Fail",
          "type": "boolean"
        },
        "message": {
          "title": "Message",
          "type": "string"
        },
        "rating": {
          "title": "Rating",
          "type": "integer"
        }
      },
      "required": [
        "values",
        "unit",
        "dim",
        "name",
        "origin",
        "internalReference"
      ]
    }
  }
}